#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'

# TODO: cd pwd func wrapper
# TODO: sshh module @home, shell, github().pull/clone

# Paths and utils
module Base
  def home
    Pathname.new('~').expand_path
  end

  def newhome
    pdir(home) unless home.exist?
  end

  def pdir(base, *subs)
    dir = Pathname.new(base).join(*subs).expand_path
    FileUtils.mkdir_p(dir) unless dir.exist?
    dir
  end

  module_function :home, :newhome, :pdir

  def github(repo)
    local = Pathname.new(repo.split('/').last)
    if local.exist? && (local / '.git').exist?
      system("git -C #{local.realpath} pull")
    else
      system("git clone https://github.com/#{repo}")
    end
  end
end

# Vim plugins
class Vim
  extend Base
  @pkgs = %(

    hrls/bullfinch
    vim-airline/vim-airline

    junegunn/fzf.vim
    majutsushi/tagbar
    scrooloose/nerdtree
    vim-scripts/restore_view.vim

    tpope/vim-markdown

  ).split

  def self.install_packages
    autoload_dir = pdir(home / '.vim' / 'autoload')
    pathogen = autoload_dir / 'pathogen.vim'
    system("curl -LSso #{pathogen} https://tpo.pe/pathogen.vim")

    bundles = pdir(home / '.vim' / 'bundle')
    FileUtils.cd(bundles, verbose: true)
    @pkgs.each { |pkg| github pkg }
  end
end

# Env / shell / etc
class Zsh
  extend Base

  def self.hushlogin
    hl = home / '.hushlogin'
    system("touch #{hl}") unless hl.exist?
  end

  def self.dotlocal
    pdir(home / '.local' / 'bin')
    pdir(home / '.local' / 'var')
  end
end

# TODO: link dotfiles
# TODO: symlinks scripts/* ~/.local/bin

Base.newhome

Zsh.hushlogin
Zsh.dotlocal

Vim.install_packages
